name: Publish-on-Docker-Hub

on:
  #release:
  #  types: [published]
  
  # при наличии тэга, содержащего v.
    push:
      tags:
        - v.*

jobs:
  run_tests:
    # Первую джобу смело можем копипастить из экшена для тестирования
    runs-on: [ubuntu-latest]
    steps:
      # Чекаутим код
      - uses: actions/checkout@v2
      # Устанавливаем python нужной версии
      - uses: actions/setup-python@v1
        with:
          python-version: '3.8'
          architecture: 'x64'
      - name: Install requirements
        # Устанавливаем зависимости
        run: pip install -r ./cicd/docker/requirements_test.txt
      - name: Run tests
        # Запускаем тесты
        run: coverage run ./cicd/test/unit_test.py
      - name: Tests report
        run: coverage report

  build_and_pub:
    # Если тесты были пройдены успешно.
    needs: [run_tests]
    runs-on: [ubuntu-latest]
    env:
      LOGIN: ${{ secrets.DOCKER_LOGIN }}
      NAME: ${{ secrets.DOCKER_NAME }}
      NAME2: ${{ secrets.DOCKER_NAME2 }}
    steps:
      - name: Login to docker.io
        # Сначала мы логинимся в docker.io
        run:  echo ${{ secrets.DOCKER_PWD }} | docker login -u ${{ secrets.DOCKER_LOGIN }} --password-stdin
        # Чекаутим код
      - uses: actions/checkout@master
        # Получим текущий тэг
      - name: get_version
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
        # Собираем образа alerter'а, первый именуем 'latest', второй - текущим тэгом
      - name: Build image Alerter Latest
        run: docker build -t $LOGIN/$NAME:latest -f ./cicd/docker/alerter .
      - name: Build image Alerter Version 
        run: docker build -t $LOGIN/$NAME:${{ steps.vars.outputs.tag }} -f ./cicd/docker/alerter .
        # Аналогично собираем образы flask'а
      - name: Build image Flask Latest
        run: docker build -t $LOGIN/$NAME2:latest -f ./cicd/docker/flask .
      - name: Build image Flask Version
        run: docker build -t $LOGIN/$NAME2:${{ steps.vars.outputs.tag }} -f ./cicd/docker/flask .
        # Пушим образы в registry
      - name: Push image to docker.io
        run: docker push $LOGIN/$NAME:latest
      - name: Push image to docker.io
        run: docker push $LOGIN/$NAME:${{ steps.vars.outputs.tag }}
      - name: Push image to docker.io
        run: docker push $LOGIN/$NAME2:latest
      - name: Push image to docker.io
        run: docker push $LOGIN/$NAME2:${{ steps.vars.outputs.tag }}

